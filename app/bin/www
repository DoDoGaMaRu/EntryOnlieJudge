#!/usr/bin/env node

/**
 * Module dependencies.
 */

import './config.js';

import app from '../src/app.js';
import debugManager from 'debug';
import http from 'http';
import mongoose from 'mongoose';
import fs from 'fs';
import { ROLE as R, admins, teachers } from '#middlewares/session.middleware.js';
import uRepo from '#repositories/user.repository.js';

var debug = debugManager('node:server');
/**
 * Mongoose connection setting
 */

const mongoOptions = {
  autoIndex: false,               // Don't build indexes
  maxPoolSize: 10,                // Maintain up to 10 socket connections
  serverSelectionTimeoutMS: 5000, // Keep trying to send operations for 5 seconds
  socketTimeoutMS: 45000,         // Close sockets after 45 seconds of inactivity
  family: 4,                      // Use IPv4, skip trying IPv6
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.conf.PORT || '9080');
app.set('port', port);

var server = http.createServer(app);



/**
 * Listen on provided port, on all network interfaces.
 */

const serverStart = async() => {
  try {
    await mongoose.connect(process.conf.DB_URI, mongoOptions);
    (await uRepo.find({role: R.ADMIN}, {userId: 1})).map((e)=>{
      admins.add(e.userId);
    });
    (await uRepo.find({role: R.TEACHER}, {userId: 1})).map((e)=>{
      teachers.add(e.userId);
    });
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  }
  catch (err) {
    console.log(err);
  }
}

serverStart();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

